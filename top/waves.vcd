$date
	Mon Aug 12 11:24:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 # instr [31:0] $end
$var wire 1 $ Zero $end
$var wire 32 % WriteData [31:0] $end
$var wire 32 & SrcB [31:0] $end
$var wire 32 ' SrcA [31:0] $end
$var wire 1 ( ResultSrc $end
$var wire 32 ) Result [31:0] $end
$var wire 1 * RegWrite $end
$var wire 32 + ReadData [31:0] $end
$var wire 32 , PCTarget [31:0] $end
$var wire 1 - PCSrc $end
$var wire 32 . PCPlus4 [31:0] $end
$var wire 32 / PCNext [31:0] $end
$var wire 32 0 PC [31:0] $end
$var wire 1 1 MemWrite $end
$var wire 2 2 ImmSrc [1:0] $end
$var wire 32 3 ImmExt [31:0] $end
$var wire 1 4 ALUSrc $end
$var wire 32 5 ALUResult [31:0] $end
$var wire 4 6 ALUControl [3:0] $end
$scope module adder_PC $end
$var wire 32 7 b [31:0] $end
$var wire 32 8 out [31:0] $end
$var wire 32 9 a [31:0] $end
$upscope $end
$scope module adder_branch $end
$var wire 32 : out [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 < a [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 " reset $end
$var wire 32 = SrcB [31:0] $end
$var wire 32 > SrcA [31:0] $end
$var wire 4 ? ALUControl [3:0] $end
$var reg 32 @ ALUResult [31:0] $end
$var reg 1 $ Zero $end
$upscope $end
$scope module control $end
$var wire 3 A funct3 [2:0] $end
$var wire 1 B funct7 $end
$var wire 7 C op [6:0] $end
$var wire 1 $ zero $end
$var parameter 7 D BRANCH $end
$var parameter 7 E I_TYPE $end
$var parameter 7 F JAL $end
$var parameter 7 G JALR $end
$var parameter 7 H LOAD $end
$var parameter 7 I R_TYPE $end
$var parameter 7 J S_TYPE $end
$var reg 4 K ALUControl [3:0] $end
$var reg 1 4 ALUSrc $end
$var reg 2 L ImmSrc [1:0] $end
$var reg 1 1 MemWrite $end
$var reg 1 - PCSrc $end
$var reg 1 * RegWrite $end
$var reg 1 ( ResultSrc $end
$var reg 1 M branch $end
$upscope $end
$scope module datamem $end
$var wire 32 N A [31:0] $end
$var wire 1 1 WE $end
$var wire 1 ! clk $end
$var wire 32 O WD [31:0] $end
$var reg 32 P RD [31:0] $end
$upscope $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 Q d [31:0] $end
$var reg 32 R q [31:0] $end
$upscope $end
$scope module extender $end
$var wire 2 S ImmSrc [1:0] $end
$var wire 32 T instr [31:0] $end
$var reg 32 U ImmExt [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 V A [31:0] $end
$var wire 1 " reset $end
$var wire 32 W RD [31:0] $end
$upscope $end
$scope module mux_PC $end
$var wire 32 X D0 [31:0] $end
$var wire 32 Y D1 [31:0] $end
$var wire 1 - S $end
$var wire 32 Z Y [31:0] $end
$upscope $end
$scope module mux_alu $end
$var wire 32 [ D1 [31:0] $end
$var wire 1 4 S $end
$var wire 32 \ Y [31:0] $end
$var wire 32 ] D0 [31:0] $end
$upscope $end
$scope module mux_dataMem $end
$var wire 32 ^ D0 [31:0] $end
$var wire 32 _ D1 [31:0] $end
$var wire 1 ( S $end
$var wire 32 ` Y [31:0] $end
$upscope $end
$scope module register $end
$var wire 5 a A1 [4:0] $end
$var wire 5 b A2 [4:0] $end
$var wire 5 c A3 [4:0] $end
$var wire 32 d WD3 [31:0] $end
$var wire 1 * WE3 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 e RD1 [31:0] $end
$var reg 32 f RD2 [31:0] $end
$var integer 32 g i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 J
b110011 I
b11 H
b1100111 G
b1101111 F
b10011 E
b1100011 D
$end
#0
$dumpvars
b100000 g
b0 f
b0 e
bx d
b110 c
b11100 b
b1001 a
bx `
bx _
b11111111111111111111111111111100 ^
b0 ]
b11111111111111111111111111111100 \
b11111111111111111111111111111100 [
b100 Z
b11111111111111111111111111111100 Y
b100 X
b11111111110001001010001100000011 W
b0 V
b11111111111111111111111111111100 U
b11111111110001001010001100000011 T
b0 S
b0 R
b100 Q
bx P
b0 O
b11111111111111111111111111111100 N
xM
b0 L
b0 K
b11 C
1B
b10 A
b11111111111111111111111111111100 @
b0 ?
b0 >
b11111111111111111111111111111100 =
b0 <
b11111111111111111111111111111100 ;
b11111111111111111111111111111100 :
b0 9
b100 8
b100 7
b0 6
b11111111111111111111111111111100 5
14
b11111111111111111111111111111100 3
b0 2
01
b0 0
b100 /
b100 .
0-
b11111111111111111111111111111100 ,
bx +
1*
bx )
1(
b0 '
b11111111111111111111111111111100 &
b0 %
1$
b11111111110001001010001100000011 #
1"
1!
$end
#5
0!
#10
0$
b1000 5
b1000 @
b1000 N
b1000 ^
b1 2
b1 L
b1 S
0*
11
b0 6
b0 ?
b0 K
b1000 &
b1000 =
b1000 \
0B
b110 b
b1000 c
b100011 C
b1000 3
b1000 ;
b1000 U
b1000 [
b1000 /
b1000 Q
b1000 Z
b11001001010010000100011 #
b11001001010010000100011 T
b11001001010010000100011 W
b1100 ,
b1100 :
b1100 Y
b1000 .
b1000 8
b1000 X
b100 0
b100 9
b100 <
b100 R
b100 V
1!
0"
#15
0!
#20
bx )
bx `
bx d
bx 5
bx @
bx N
bx ^
04
0(
01
1*
b110 6
b110 ?
b110 K
bx &
bx =
bx \
b101 a
b110 A
b100 c
b110011 C
b100 3
b100 ;
b100 U
b100 [
b1100 /
b1100 Q
b1100 Z
bx %
bx O
bx ]
bx f
b11000101110001000110011 #
b11000101110001000110011 T
b11000101110001000110011 W
b1100 ,
b1100 :
b1100 Y
b1100 .
b1100 8
b1100 X
b1000 0
b1000 9
b1000 <
b1000 R
b1000 V
1!
#25
0!
#30
1M
b10 2
b10 L
b10 S
0*
b1 6
b1 ?
b1 K
1B
b100 b
b0 A
b100 a
b1100011 C
b10101 c
b11111111111100100000011111100100 3
b11111111111100100000011111100100 ;
b11111111111100100000011111100100 U
b11111111111100100000011111100100 [
b10000 /
b10000 Q
b10000 Z
b11111110010000100000101011100011 #
b11111110010000100000101011100011 T
b11111110010000100000101011100011 W
b11111111111100100000011111110000 ,
b11111111111100100000011111110000 :
b11111111111100100000011111110000 Y
b10000 .
b10000 8
b10000 X
b1100 0
b1100 9
b1100 <
b1100 R
b1100 V
1!
#35
0!
#40
b1 6
b1 ?
b1 K
0B
b111 b
b101 a
b10000 c
b101000100000100110 3
b101000100000100110 ;
b101000100000100110 U
b101000100000100110 [
b10100 /
b10100 Q
b10100 Z
bx '
bx >
bx e
b10011100101000100001100011 #
b10011100101000100001100011 T
b10011100101000100001100011 W
b101000100000110110 ,
b101000100000110110 :
b101000100000110110 Y
b10100 .
b10100 8
b10100 X
b10000 0
b10000 9
b10000 <
b10000 R
b10000 V
1!
#45
0!
#50
b0 )
b0 `
b0 d
b0 5
b0 @
b0 N
b0 ^
b0 6
b0 ?
b0 K
b0 b
b0 c
b0 a
b0 C
b0 3
b0 ;
b0 U
b0 [
b11000 /
b11000 Q
b11000 Z
b0 &
b0 =
b0 \
b0 #
b0 T
b0 W
b10100 ,
b10100 :
b10100 Y
b11000 .
b11000 8
b11000 X
b10100 0
b10100 9
b10100 <
b10100 R
b10100 V
b0 %
b0 O
b0 ]
b0 f
b0 '
b0 >
b0 e
1!
#55
0!
#60
b11100 /
b11100 Q
b11100 Z
b11000 ,
b11000 :
b11000 Y
b11100 .
b11100 8
b11100 X
b11000 0
b11000 9
b11000 <
b11000 R
b11000 V
1!
#65
0!
#70
b100000 /
b100000 Q
b100000 Z
b11100 ,
b11100 :
b11100 Y
b100000 .
b100000 8
b100000 X
b11100 0
b11100 9
b11100 <
b11100 R
b11100 V
1!
#75
0!
#80
1$
bx 6
bx ?
bx K
xB
bx b
bx A
bx a
bx C
bx c
bx0 3
bx0 ;
bx0 U
bx0 [
b100100 /
b100100 Q
b100100 Z
bx #
bx T
bx W
bx ,
bx :
bx Y
b100100 .
b100100 8
b100100 X
b100000 0
b100000 9
b100000 <
b100000 R
b100000 V
1!
#85
0!
#90
b101000 /
b101000 Q
b101000 Z
bx &
bx =
bx \
b101000 .
b101000 8
b101000 X
b100100 0
b100100 9
b100100 <
b100100 R
b100100 V
bx %
bx O
bx ]
bx f
bx '
bx >
bx e
1!
#95
0!
#100
b101100 /
b101100 Q
b101100 Z
b101100 .
b101100 8
b101100 X
b101000 0
b101000 9
b101000 <
b101000 R
b101000 V
1!
#105
0!
#110
b110000 /
b110000 Q
b110000 Z
b110000 .
b110000 8
b110000 X
b101100 0
b101100 9
b101100 <
b101100 R
b101100 V
1!
