$date
	Sun Aug 11 22:45:32 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 4 # ALUControl [3:0] $end
$var wire 1 $ ALUSrc $end
$var wire 2 % ImmSrc [1:0] $end
$var wire 1 & MemWrite $end
$var wire 1 ' PCSrc $end
$var wire 1 ( RegWrite $end
$var wire 1 ) ResultSrc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 * instr [31:0] $end
$var wire 1 + Zero $end
$var wire 32 , WriteData [31:0] $end
$var wire 32 - SrcB [31:0] $end
$var wire 32 . SrcA [31:0] $end
$var wire 32 / Result [31:0] $end
$var wire 32 0 ReadData [31:0] $end
$var wire 32 1 PCTarget [31:0] $end
$var wire 32 2 PCPlus4 [31:0] $end
$var wire 32 3 PCNext [31:0] $end
$var wire 32 4 PC [31:0] $end
$var wire 32 5 ImmExt [31:0] $end
$var wire 32 6 ALUResult [31:0] $end
$scope module adder_PC $end
$var wire 32 7 b [31:0] $end
$var wire 32 8 out [31:0] $end
$var wire 32 9 a [31:0] $end
$upscope $end
$scope module adder_branch $end
$var wire 32 : out [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 < a [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 = ALUControl [3:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 > SrcB [31:0] $end
$var wire 32 ? SrcA [31:0] $end
$var reg 32 @ ALUResult [31:0] $end
$var reg 1 + Zero $end
$upscope $end
$scope module control $end
$var wire 3 A funct3 [2:0] $end
$var wire 1 B funct7 $end
$var wire 7 C op [6:0] $end
$var wire 1 D zero $end
$var parameter 7 E BRANCH $end
$var parameter 7 F I_TYPE $end
$var parameter 7 G JAL $end
$var parameter 7 H JALR $end
$var parameter 7 I LOAD $end
$var parameter 7 J R_TYPE $end
$var parameter 7 K S_TYPE $end
$var reg 4 L ALUControl [3:0] $end
$var reg 1 M ALUSrc $end
$var reg 2 N ImmSrc [1:0] $end
$var reg 1 O MemWrite $end
$var reg 1 P PCSrc $end
$var reg 1 Q RegWrite $end
$var reg 1 R ResultSrc $end
$var reg 1 S branch $end
$upscope $end
$scope module datamem $end
$var wire 32 T A [31:0] $end
$var wire 1 & WE $end
$var wire 1 U clk $end
$var wire 32 V WD [31:0] $end
$var reg 32 W RD [31:0] $end
$upscope $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 X d [31:0] $end
$var reg 32 Y q [31:0] $end
$upscope $end
$scope module extender $end
$var wire 2 Z ImmSrc [1:0] $end
$var wire 32 [ instr [31:0] $end
$var reg 32 \ ImmExt [31:0] $end
$upscope $end
$scope module inst_mem $end
$var wire 32 ] A [31:0] $end
$var wire 1 " reset $end
$var wire 32 ^ RD [31:0] $end
$upscope $end
$scope module mux_PC $end
$var wire 32 _ D0 [31:0] $end
$var wire 32 ` D1 [31:0] $end
$var wire 1 ' S $end
$var wire 32 a Y [31:0] $end
$upscope $end
$scope module mux_alu $end
$var wire 32 b D1 [31:0] $end
$var wire 1 $ S $end
$var wire 32 c Y [31:0] $end
$var wire 32 d D0 [31:0] $end
$upscope $end
$scope module mux_dataMem $end
$var wire 32 e D0 [31:0] $end
$var wire 32 f D1 [31:0] $end
$var wire 1 ) S $end
$var wire 32 g Y [31:0] $end
$upscope $end
$scope module register $end
$var wire 5 h A1 [4:0] $end
$var wire 5 i A2 [4:0] $end
$var wire 5 j A3 [4:0] $end
$var wire 32 k WD3 [31:0] $end
$var wire 1 ( WE3 $end
$var wire 1 ! clk $end
$var wire 1 l reset $end
$var reg 32 m RD1 [31:0] $end
$var reg 32 n RD2 [31:0] $end
$var integer 32 o i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100011 K
b110011 J
b11 I
b1100111 H
b1101111 G
b10011 F
b1100011 E
$end
#0
$dumpvars
bx o
bx n
bx m
zl
bx k
bx j
bx i
bx h
bx g
bx f
b0 e
bx d
bx c
b0 b
bx a
bx `
bx _
bx ^
bx ]
b0 \
bx [
bz Z
bx Y
bx X
bx W
bx V
zU
b0 T
xS
xR
xQ
xP
xO
bx N
xM
bx L
zD
bx C
xB
bx A
b0 @
bx ?
bx >
bz =
bx <
b0 ;
bx :
bx 9
bx 8
b100 7
b0 6
b0 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
0+
bx *
z)
z(
z'
z&
bz %
z$
bz #
1"
0!
$end
#5
b0x00 3
b0x00 X
b0x00 a
1+
b0 1
b0 :
b0 `
b100 2
b100 8
b100 _
b0 4
b0 9
b0 <
b0 Y
b0 ]
1!
#10
0M
0P
0R
0O
1Q
b0 L
0B
b1001 i
b0 A
b1000 h
b110011 C
b110 j
b100101000000001100110011 *
b100101000000001100110011 [
b100101000000001100110011 ^
0!
0"
#15
bx L
xB
bx i
bx A
bx h
bx C
bx j
bx 3
bx X
bx a
bx *
bx [
bx ^
bx 1
bx :
bx `
bx 2
bx 8
bx _
b0x00 4
b0x00 9
b0x00 <
b0x00 Y
b0x00 ]
1!
#20
0!
#25
bx 4
bx 9
bx <
bx Y
bx ]
1!
#30
0!
#35
1!
#40
0!
#45
1!
#50
0!
#55
1!
#60
0!
#65
1!
#70
0!
#75
1!
#80
0!
#85
1!
#90
0!
#95
1!
#100
0!
#105
1!
#110
0!
#115
1!
#120
0!
#125
1!
#130
0!
#135
1!
#140
0!
#145
1!
#150
0!
#155
1!
#160
0!
#165
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
#510
0!
#515
1!
#520
0!
#525
1!
#530
0!
#535
1!
#540
0!
#545
1!
#550
0!
#555
1!
#560
0!
#565
1!
#570
0!
#575
1!
#580
0!
#585
1!
#590
0!
#595
1!
#600
0!
#605
1!
#610
0!
#615
1!
#620
0!
#625
1!
#630
0!
#635
1!
#640
0!
#645
1!
#650
0!
#655
1!
#660
0!
#665
1!
#670
0!
#675
1!
#680
0!
#685
1!
#690
0!
#695
1!
#700
0!
#705
1!
#710
0!
#715
1!
#720
0!
#725
1!
#730
0!
#735
1!
#740
0!
#745
1!
#750
0!
#755
1!
#760
0!
#765
1!
#770
0!
#775
1!
#780
0!
#785
1!
#790
0!
#795
1!
#800
0!
#805
1!
#810
0!
#815
1!
#820
0!
#825
1!
#830
0!
#835
1!
#840
0!
#845
1!
#850
0!
#855
1!
#860
0!
#865
1!
#870
0!
#875
1!
#880
0!
#885
1!
#890
0!
#895
1!
#900
0!
#905
1!
#910
0!
#915
1!
#920
0!
#925
1!
#930
0!
#935
1!
#940
0!
#945
1!
#950
0!
#955
1!
#960
0!
#965
1!
#970
0!
#975
1!
#980
0!
#985
1!
#990
0!
#995
1!
#1000
0!
#1005
1!
#1010
0!
